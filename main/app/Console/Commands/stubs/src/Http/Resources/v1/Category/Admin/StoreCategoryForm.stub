<?php

namespace $PACKAGE_NAMESPACE$\Http\Resources\v1\Category\Admin;

use $PACKAGE_NAMESPACE$\Models\Category as Model;
use $PACKAGE_NAMESPACE$\Repositories\CategoryRepositoryInterface;
use MetaFox\Platform\MetaFoxForm;
use MetaFox\Platform\Support\Form\AbstractForm;
use MetaFox\Platform\Support\Form\Field\CancelButton;
use MetaFox\Platform\Support\Form\Field\CheckboxField;
use MetaFox\Platform\Support\Form\Field\Choice;
use MetaFox\Platform\Support\Form\Field\Submit;
use MetaFox\Platform\Support\Form\Field\Text;

/**
 * --------------------------------------------------------------------------
 * Code Generator
 * --------------------------------------------------------------------------
 * stub: $STUB$
 */

/**
 * Class StoreCategoryForm.
 * @property ?Model $resource
 * @ignore
 * @codeCoverageIgnore
 */
class StoreCategoryForm extends AbstractForm
{
    protected function prepare(): void
    {
        $this->config([
            'title'  => 'Create Category',
            'method' => MetaFoxForm::METHOD_POST,
            'action' => url_utility()->makeApiUrl('admincp/$PACKAGE_ALIAS$/category'),
            'value'  => [
                'name_url' => null,
            ],
        ]);
    }

    /**
     * @return array<string,mixed>
     */
    private function getParentCategoryOptions(): array
    {
        $query = resolve(CategoryRepositoryInterface::class)->getModel()->newQuery();

        if ($this->resource && $this->resource->id) {
            $query->where([
                ['id', '<>', $this->resource->id],
                ['parent_id', '<>', $this->resource->id],
            ])->orWhere([
                ['id', '<>', $this->resource->id],
                ['parent_id', '=', null],
            ]);
        }

        return arrayToTree($query->get()->toArray(), 'id', 'parent_id', 'options');
    }

    protected function initialize(): void
    {
        $basic = $this->addBasic([]);

        $basic->addFields(
            new Text([
                'name'       => 'name',
                'label'      => __p('core::phrase.name'),
                'required'   => true,
                'validation' => [
                    'type'      => 'string',
                    'maxLength' => 128,
                    'required'  => true,
                    'errors'    => [
                        'required'  => __p('validation.this_field_is_required'),
                        'maxLength' => __p('validation.field_must_be_at_most_max_length_characters'),
                    ],
                ],
            ]),
            new Text([
                'name'       => 'name_url',
                'label'      => 'Slug',
                'validation' => [
                    'title'    => 'Slug',
                    'nullable' => true,
                    'type'     => 'string',
                ],
            ]),
            new Choice([
                'name'       => 'parent_id',
                'label'      => 'Parent Category',
                'required'   => false,
                'labelProp'  => 'name',
                'valueProp'  => 'id',
                'validation' => [
                    'nullable' => true,
                    'required' => false,
                    'type'     => 'number',
                    'positive' => true,
                ],
                'options'    => $this->getParentCategoryOptions(),
            ]),
            new Text([
                'name'       => 'ordering',
                'label'      => 'Ordering',
                'validation' => [
                    'type'     => 'number',
                    'nullable' => true,
                    'positive' => true,
                ],
            ]),
            new CheckboxField([
                'name'     => 'is_active',
                'label'    => 'Active',
                'required' => true,
            ]),
        );

        $this->addDefaultFooter(false);
    }
}
